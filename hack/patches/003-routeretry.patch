diff --git a/vendor/knative.dev/pkg/test/spoof/openshift_checks.go b/vendor/knative.dev/pkg/test/spoof/openshift_checks.go
new file mode 100644
index 000000000..f7ba08f82
--- /dev/null
+++ b/vendor/knative.dev/pkg/test/spoof/openshift_checks.go
@@ -0,0 +1,22 @@
+package spoof
+
+import (
+	"fmt"
+	"net/http"
+	"strings"
+)
+
+// isUnknownAuthority checks if the error contains "certificate signed by unknown authority".
+// This error happens when OpenShift Route starts/changes to use passthrough mode. It takes a little bit time to be synced.
+func isUnknownAuthority(err error) bool {
+	return err != nil && strings.Contains(err.Error(), "certificate signed by unknown authority")
+}
+
+// RetryingRouteInconsistency retries common requests seen when creating a new route
+// - 503 to account for Openshift route inconsistency (https://jira.coreos.com/browse/SRVKS-157)
+func RouteInconsistencyRetryChecker(resp *Response) (bool, error) {
+	if resp.StatusCode == http.StatusServiceUnavailable {
+		return true, fmt.Errorf("retrying route inconsistency request: %s", resp)
+	}
+	return false, nil
+}
diff --git a/vendor/knative.dev/pkg/test/spoof/spoof.go b/vendor/knative.dev/pkg/test/spoof/spoof.go
index f2baa4edf..ec812f751 100644
--- a/vendor/knative.dev/pkg/test/spoof/spoof.go
+++ b/vendor/knative.dev/pkg/test/spoof/spoof.go
@@ -164,7 +164,7 @@ func (sc *SpoofingClient) Do(req *http.Request, errorRetryCheckers ...interface{
 // If no retry checkers are specified `DefaultErrorRetryChecker` will be used.
 func (sc *SpoofingClient) Poll(req *http.Request, inState ResponseChecker, checkers ...interface{}) (*Response, error) {
 	if len(checkers) == 0 {
-		checkers = []interface{}{ErrorRetryChecker(DefaultErrorRetryChecker)}
+		checkers = []interface{}{ErrorRetryChecker(DefaultErrorRetryChecker), ResponseRetryChecker(RouteInconsistencyRetryChecker)}
 	}
 
 	var resp *Response
@@ -252,6 +252,9 @@ func DefaultErrorRetryChecker(err error) (bool, error) {
 	if isNoRouteToHostError(err) {
 		return true, fmt.Errorf("retrying for 'no route to host' error: %w", err)
 	}
+	if isUnknownAuthority(err) {
+		return true, fmt.Errorf("retrying for certificate signed by unknown authority: %w", err)
+	}
 	return false, err
 }
 
