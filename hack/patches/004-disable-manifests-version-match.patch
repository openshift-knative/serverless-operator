diff --git a/vendor/knative.dev/operator/pkg/reconciler/common/releases.go b/vendor/knative.dev/operator/pkg/reconciler/common/releases.go
index 7d58c243c..3f91e85ca 100644
--- a/vendor/knative.dev/operator/pkg/reconciler/common/releases.go
+++ b/vendor/knative.dev/operator/pkg/reconciler/common/releases.go
@@ -206,18 +206,20 @@ func getManifestWithVersionValidation(manifestsPath string, instance base.KCompo
 		return manifests, nil
 	}

-	targetVersion := SanitizeSemver(version)
-	key := "app.kubernetes.io/version"
-	for _, u := range manifests.Resources() {
-		// Check the labels of the resources one by one to see if the version matches the target version in terms of
-		// major.minor.
-		manifestVersion := u.GetLabels()[key]
-		manifestVersionSan := SanitizeSemver(u.GetLabels()[key])
-		if manifestVersion != "" && semver.MajorMinor(targetVersion) != semver.MajorMinor(manifestVersionSan) {
-			return mf.Manifest{}, fmt.Errorf("the version of the manifests %s of the component %s does not match the target "+
-				"version of the operator CR %s", manifestVersionSan, u.GetName(), targetVersion)
-		}
-	}
+	// We support only one version, there is no need to check manifest consistency and it is actually a pain to experiment
+	// with future releases.
+	//
+	//targetVersion := SanitizeSemver(version)
+	//key := getVersionKey(instance)
+	//for _, u := range manifests.Resources() {
+	//	// Check the labels of the resources one by one to see if the version matches the target version in terms of
+	//	// major.minor.
+	//	manifestVersion := u.GetLabels()[key]
+	//	if manifestVersion != "" && semver.MajorMinor(targetVersion) != semver.MajorMinor(manifestVersion) {
+	//		return mf.Manifest{}, fmt.Errorf("the version of the manifests %s of the component %s does not match the target "+
+	//			"version of the operator CR %s", manifestVersion, u.GetName(), targetVersion)
+	//	}
+	//}

 	return manifests, nil
 }

