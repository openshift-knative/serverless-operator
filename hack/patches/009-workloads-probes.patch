diff --git a/vendor/knative.dev/operator/pkg/apis/operator/base/common.go b/vendor/knative.dev/operator/pkg/apis/operator/base/common.go
index f75bfd430..3d91d697f 100644
--- a/vendor/knative.dev/operator/pkg/apis/operator/base/common.go
+++ b/vendor/knative.dev/operator/pkg/apis/operator/base/common.go
@@ -67,8 +67,8 @@ type KComponentSpec interface {
 	// GetHighAvailability returns means to set the number of desired replicas
 	GetHighAvailability() *HighAvailability

-	// GetDeploymentOverride gets the deployment configurations to override.
-	GetDeploymentOverride() []DeploymentOverride
+	// GetWorkloadOverrides gets the component configurations to override.
+	GetWorkloadOverrides() []WorkloadOverride

 	// GetServiceOverride gets the service configurations to override.
 	GetServiceOverride() []ServiceOverride
@@ -133,9 +133,14 @@ type CommonSpec struct {
 	// +optional
 	DeprecatedResources []ResourceRequirementsOverride `json:"resources,omitempty"`

+	// DEPRECATED. Use components
 	// DeploymentOverride overrides Deployment configurations such as resources and replicas.
 	// +optional
-	DeploymentOverride []DeploymentOverride `json:"deployments,omitempty"`
+	DeploymentOverride []WorkloadOverride `json:"deployments,omitempty"`
+
+	// Workloads overrides workloads configurations such as resources and replicas.
+	// +optional
+	Workloads []WorkloadOverride `json:"workloads,omitempty"`

 	// ServiceOverride overrides Service configurations such as labels and annotations.
 	// +optional
@@ -193,8 +198,8 @@ func (c *CommonSpec) GetHighAvailability() *HighAvailability {
 	return c.HighAvailability
 }

-// GetDeploymentOverride implements KComponentSpec.
-func (c *CommonSpec) GetDeploymentOverride() []DeploymentOverride {
+// GetWorkloadOverrides implements KComponentSpec.
+func (c *CommonSpec) GetWorkloadOverrides() []WorkloadOverride {
 	return c.DeploymentOverride
 }

@@ -229,8 +234,8 @@ type Registry struct {
 	ImagePullSecrets []corev1.LocalObjectReference `json:"imagePullSecrets,omitempty"`
 }

-// DeploymentOverride defines the configurations of deployments to override.
-type DeploymentOverride struct {
+// WorkloadOverride defines the configurations of deployments to override.
+type WorkloadOverride struct {
 	// Name is the name of the deployment to override.
 	Name string `json:"name"`

@@ -266,6 +271,14 @@ type DeploymentOverride struct {
 	// Env overrides env vars for the containers.
 	// +optional
 	Env []EnvRequirementsOverride `json:"env,omitempty"`
+
+	// ReadinessProbes overrides readiness probes for the containers.
+	// +optional
+	ReadinessProbes []ProbesRequirementsOverride `json:"readinessProbes,omitempty"`
+
+	// LivenessProbes overrides liveness probes for the containers.
+	// +optional
+	LivenessProbes []ProbesRequirementsOverride `json:"livenessProbes,omitempty"`
 }

 // ServiceOverride defines the configurations of the service to override.
@@ -303,6 +316,44 @@ type EnvRequirementsOverride struct {
 	EnvVars []corev1.EnvVar `json:"envVars,omitempty"`
 }

+// ProbesRequirementsOverride enables the user to override any container's env vars.
+type ProbesRequirementsOverride struct {
+	// The container name
+	Container string `json:"container"`
+	// Number of seconds after the container has started before liveness probes are initiated.
+	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
+	// +optional
+	InitialDelaySeconds int32 `json:"initialDelaySeconds,omitempty" protobuf:"varint,2,opt,name=initialDelaySeconds"`
+	// Number of seconds after which the probe times out.
+	// Defaults to 1 second. Minimum value is 1.
+	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
+	// +optional
+	TimeoutSeconds int32 `json:"timeoutSeconds,omitempty" protobuf:"varint,3,opt,name=timeoutSeconds"`
+	// How often (in seconds) to perform the probe.
+	// Default to 10 seconds. Minimum value is 1.
+	// +optional
+	PeriodSeconds int32 `json:"periodSeconds,omitempty" protobuf:"varint,4,opt,name=periodSeconds"`
+	// Minimum consecutive successes for the probe to be considered successful after having failed.
+	// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
+	// +optional
+	SuccessThreshold int32 `json:"successThreshold,omitempty" protobuf:"varint,5,opt,name=successThreshold"`
+	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
+	// Defaults to 3. Minimum value is 1.
+	// +optional
+	FailureThreshold int32 `json:"failureThreshold,omitempty" protobuf:"varint,6,opt,name=failureThreshold"`
+	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
+	// The grace period is the duration in seconds after the processes running in the pod are sent
+	// a termination signal and the time when the processes are forcibly halted with a kill signal.
+	// Set this value longer than the expected cleanup time for your process.
+	// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
+	// value overrides the value provided by the pod spec.
+	// Value must be non-negative integer. The value zero indicates stop immediately via
+	// the kill signal (no opportunity to shut down).
+	// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
+	// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
+	// +optional
+	TerminationGracePeriodSeconds *int64 `json:"terminationGracePeriodSeconds,omitempty" protobuf:"varint,7,opt,name=terminationGracePeriodSeconds"`
+}
 // Manifest enables the user to specify the links to the manifests' URLs
 type Manifest struct {
 	// The link of the manifest URL
diff --git a/vendor/knative.dev/operator/pkg/apis/operator/base/zz_generated.deepcopy.go b/vendor/knative.dev/operator/pkg/apis/operator/base/zz_generated.deepcopy.go
index 257c3757f..605777742 100644
--- a/vendor/knative.dev/operator/pkg/apis/operator/base/zz_generated.deepcopy.go
+++ b/vendor/knative.dev/operator/pkg/apis/operator/base/zz_generated.deepcopy.go
@@ -88,7 +88,14 @@ func (in *CommonSpec) DeepCopyInto(out *CommonSpec) {
 	}
 	if in.DeploymentOverride != nil {
 		in, out := &in.DeploymentOverride, &out.DeploymentOverride
-		*out = make([]DeploymentOverride, len(*in))
+		*out = make([]WorkloadOverride, len(*in))
+		for i := range *in {
+			(*in)[i].DeepCopyInto(&(*out)[i])
+		}
+	}
+	if in.Workloads != nil {
+		in, out := &in.Workloads, &out.Workloads
+		*out = make([]WorkloadOverride, len(*in))
 		for i := range *in {
 			(*in)[i].DeepCopyInto(&(*out)[i])
 		}
@@ -208,74 +215,6 @@ func (in *CustomCerts) DeepCopy() *CustomCerts {
 	return out
 }

-// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
-func (in *DeploymentOverride) DeepCopyInto(out *DeploymentOverride) {
-	*out = *in
-	if in.Labels != nil {
-		in, out := &in.Labels, &out.Labels
-		*out = make(map[string]string, len(*in))
-		for key, val := range *in {
-			(*out)[key] = val
-		}
-	}
-	if in.Annotations != nil {
-		in, out := &in.Annotations, &out.Annotations
-		*out = make(map[string]string, len(*in))
-		for key, val := range *in {
-			(*out)[key] = val
-		}
-	}
-	if in.Replicas != nil {
-		in, out := &in.Replicas, &out.Replicas
-		*out = new(int32)
-		**out = **in
-	}
-	if in.NodeSelector != nil {
-		in, out := &in.NodeSelector, &out.NodeSelector
-		*out = make(map[string]string, len(*in))
-		for key, val := range *in {
-			(*out)[key] = val
-		}
-	}
-	if in.Tolerations != nil {
-		in, out := &in.Tolerations, &out.Tolerations
-		*out = make([]v1.Toleration, len(*in))
-		for i := range *in {
-			(*in)[i].DeepCopyInto(&(*out)[i])
-		}
-	}
-	if in.Affinity != nil {
-		in, out := &in.Affinity, &out.Affinity
-		*out = new(v1.Affinity)
-		(*in).DeepCopyInto(*out)
-	}
-	if in.Resources != nil {
-		in, out := &in.Resources, &out.Resources
-		*out = make([]ResourceRequirementsOverride, len(*in))
-		for i := range *in {
-			(*in)[i].DeepCopyInto(&(*out)[i])
-		}
-	}
-	if in.Env != nil {
-		in, out := &in.Env, &out.Env
-		*out = make([]EnvRequirementsOverride, len(*in))
-		for i := range *in {
-			(*in)[i].DeepCopyInto(&(*out)[i])
-		}
-	}
-	return
-}
-
-// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeploymentOverride.
-func (in *DeploymentOverride) DeepCopy() *DeploymentOverride {
-	if in == nil {
-		return nil
-	}
-	out := new(DeploymentOverride)
-	in.DeepCopyInto(out)
-	return out
-}
-
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *EnvRequirementsOverride) DeepCopyInto(out *EnvRequirementsOverride) {
 	*out = *in
@@ -475,6 +414,27 @@ func (in *NatssSourceConfiguration) DeepCopy() *NatssSourceConfiguration {
 	return out
 }

+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *ProbesRequirementsOverride) DeepCopyInto(out *ProbesRequirementsOverride) {
+	*out = *in
+	if in.TerminationGracePeriodSeconds != nil {
+		in, out := &in.TerminationGracePeriodSeconds, &out.TerminationGracePeriodSeconds
+		*out = new(int64)
+		**out = **in
+	}
+	return
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProbesRequirementsOverride.
+func (in *ProbesRequirementsOverride) DeepCopy() *ProbesRequirementsOverride {
+	if in == nil {
+		return nil
+	}
+	out := new(ProbesRequirementsOverride)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *PrometheusSourceConfiguration) DeepCopyInto(out *PrometheusSourceConfiguration) {
 	*out = *in
@@ -604,3 +564,85 @@ func (in *ServiceOverride) DeepCopy() *ServiceOverride {
 	in.DeepCopyInto(out)
 	return out
 }
+
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *WorkloadOverride) DeepCopyInto(out *WorkloadOverride) {
+	*out = *in
+	if in.Labels != nil {
+		in, out := &in.Labels, &out.Labels
+		*out = make(map[string]string, len(*in))
+		for key, val := range *in {
+			(*out)[key] = val
+		}
+	}
+	if in.Annotations != nil {
+		in, out := &in.Annotations, &out.Annotations
+		*out = make(map[string]string, len(*in))
+		for key, val := range *in {
+			(*out)[key] = val
+		}
+	}
+	if in.Replicas != nil {
+		in, out := &in.Replicas, &out.Replicas
+		*out = new(int32)
+		**out = **in
+	}
+	if in.NodeSelector != nil {
+		in, out := &in.NodeSelector, &out.NodeSelector
+		*out = make(map[string]string, len(*in))
+		for key, val := range *in {
+			(*out)[key] = val
+		}
+	}
+	if in.Tolerations != nil {
+		in, out := &in.Tolerations, &out.Tolerations
+		*out = make([]v1.Toleration, len(*in))
+		for i := range *in {
+			(*in)[i].DeepCopyInto(&(*out)[i])
+		}
+	}
+	if in.Affinity != nil {
+		in, out := &in.Affinity, &out.Affinity
+		*out = new(v1.Affinity)
+		(*in).DeepCopyInto(*out)
+	}
+	if in.Resources != nil {
+		in, out := &in.Resources, &out.Resources
+		*out = make([]ResourceRequirementsOverride, len(*in))
+		for i := range *in {
+			(*in)[i].DeepCopyInto(&(*out)[i])
+		}
+	}
+	if in.Env != nil {
+		in, out := &in.Env, &out.Env
+		*out = make([]EnvRequirementsOverride, len(*in))
+		for i := range *in {
+			(*in)[i].DeepCopyInto(&(*out)[i])
+		}
+	}
+	if in.ReadinessProbes != nil {
+		in, out := &in.ReadinessProbes, &out.ReadinessProbes
+		*out = make([]ProbesRequirementsOverride, len(*in))
+		for i := range *in {
+			(*in)[i].DeepCopyInto(&(*out)[i])
+		}
+	}
+	if in.LivenessProbes != nil {
+		in, out := &in.LivenessProbes, &out.LivenessProbes
+		*out = make([]ProbesRequirementsOverride, len(*in))
+		for i := range *in {
+			(*in)[i].DeepCopyInto(&(*out)[i])
+		}
+	}
+	return
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkloadOverride.
+func (in *WorkloadOverride) DeepCopy() *WorkloadOverride {
+	if in == nil {
+		return nil
+	}
+	out := new(WorkloadOverride)
+	in.DeepCopyInto(out)
+	return out
+}
diff --git a/vendor/knative.dev/operator/pkg/apis/operator/v1alpha1/deploymentoverride.go b/vendor/knative.dev/operator/pkg/apis/operator/v1alpha1/deploymentoverride.go
index 18f5d27b7..f732fa1c2 100644
--- a/vendor/knative.dev/operator/pkg/apis/operator/v1alpha1/deploymentoverride.go
+++ b/vendor/knative.dev/operator/pkg/apis/operator/v1alpha1/deploymentoverride.go
@@ -21,10 +21,10 @@ import (
 )

 // ConvertToDeploymentOverride merges the ResourceRequirementsOverride into the DeploymentOverride
-func ConvertToDeploymentOverride(source base.KComponent) []base.DeploymentOverride {
-	mergedDeploymentOverride := source.GetSpec().GetDeploymentOverride()
+func ConvertToDeploymentOverride(source base.KComponent) []base.WorkloadOverride {
+	mergedDeploymentOverride := source.GetSpec().GetWorkloadOverrides()
 	// Make a copy of source.GetSpec().GetDeploymentOverride()
-	deploymentOverrideCopy := make([]base.DeploymentOverride, 0, len(mergedDeploymentOverride))
+	deploymentOverrideCopy := make([]base.WorkloadOverride, 0, len(mergedDeploymentOverride))
 	for _, override := range mergedDeploymentOverride {
 		copy := *override.DeepCopy()
 		deploymentOverrideCopy = append(deploymentOverrideCopy, copy)
@@ -37,8 +37,8 @@ func ConvertToDeploymentOverride(source base.KComponent) []base.DeploymentOverri
 	return deploymentOverrideCopy
 }

-func addResourceIntoDeployment(deploymentOverrides []base.DeploymentOverride,
-	resource base.ResourceRequirementsOverride) []base.DeploymentOverride {
+func addResourceIntoDeployment(deploymentOverrides []base.WorkloadOverride,
+	resource base.ResourceRequirementsOverride) []base.WorkloadOverride {
 	// If it does not exist, add the resource requirement as a new
 	// item; if it does, modify the existing resource requirement.
 	deployFound := false
@@ -62,7 +62,7 @@ func addResourceIntoDeployment(deploymentOverrides []base.DeploymentOverride,
 		}
 	}
 	if !deployFound {
-		newDeployOverride := base.DeploymentOverride{}
+		newDeployOverride := base.WorkloadOverride{}
 		// Take the container name as the deployment name.
 		newDeployOverride.Name = resource.Container
 		newDeployOverride.Resources = append(newDeployOverride.Resources, resource)
diff --git a/vendor/knative.dev/operator/pkg/reconciler/common/deployments_override.go b/vendor/knative.dev/operator/pkg/reconciler/common/deployments_override.go
deleted file mode 100644
index ece8a8f4f..000000000
--- a/vendor/knative.dev/operator/pkg/reconciler/common/deployments_override.go
+++ /dev/null
@@ -1,134 +0,0 @@
-/*
-Copyright 2020 The Knative Authors
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-*/
-
-package common
-
-import (
-	mf "github.com/manifestival/manifestival"
-	"go.uber.org/zap"
-	appsv1 "k8s.io/api/apps/v1"
-	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
-	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
-	"k8s.io/client-go/kubernetes/scheme"
-	"knative.dev/operator/pkg/apis/operator/base"
-)
-
-// DeploymentTransform transforms deployments based on the configuration in `spec.deployment`.
-func DeploymentsTransform(obj base.KComponent, log *zap.SugaredLogger) mf.Transformer {
-	overrides := obj.GetSpec().GetDeploymentOverride()
-	if overrides == nil {
-		return nil
-	}
-	return func(u *unstructured.Unstructured) error {
-		for _, override := range overrides {
-			if u.GetKind() == "Deployment" && u.GetName() == override.Name {
-
-				deployment := &appsv1.Deployment{}
-				if err := scheme.Scheme.Convert(u, deployment, nil); err != nil {
-					return err
-				}
-				replaceLabels(&override, deployment)
-				replaceAnnotations(&override, deployment)
-				replaceReplicas(&override, deployment)
-				replaceNodeSelector(&override, deployment)
-				replaceTolerations(&override, deployment)
-				replaceAffinities(&override, deployment)
-				replaceResources(&override, deployment)
-				replaceEnv(&override, deployment)
-				if err := scheme.Scheme.Convert(deployment, u, nil); err != nil {
-					return err
-				}
-				// Avoid superfluous updates from converted zero defaults
-				u.SetCreationTimestamp(metav1.Time{})
-
-			}
-		}
-		return nil
-	}
-}
-
-func replaceAnnotations(override *base.DeploymentOverride, deployment *appsv1.Deployment) {
-	if deployment.GetAnnotations() == nil {
-		deployment.Annotations = map[string]string{}
-	}
-	if deployment.Spec.Template.GetAnnotations() == nil {
-		deployment.Spec.Template.Annotations = map[string]string{}
-	}
-	for key, val := range override.Annotations {
-		deployment.Annotations[key] = val
-		deployment.Spec.Template.Annotations[key] = val
-	}
-}
-
-func replaceLabels(override *base.DeploymentOverride, deployment *appsv1.Deployment) {
-	if deployment.GetLabels() == nil {
-		deployment.Labels = map[string]string{}
-	}
-	if deployment.Spec.Template.GetLabels() == nil {
-		deployment.Spec.Template.Labels = map[string]string{}
-	}
-	for key, val := range override.Labels {
-		deployment.Labels[key] = val
-		deployment.Spec.Template.Labels[key] = val
-	}
-}
-
-func replaceReplicas(override *base.DeploymentOverride, deployment *appsv1.Deployment) {
-	if override.Replicas != nil {
-		deployment.Spec.Replicas = override.Replicas
-	}
-}
-
-func replaceNodeSelector(override *base.DeploymentOverride, deployment *appsv1.Deployment) {
-	if len(override.NodeSelector) > 0 {
-		deployment.Spec.Template.Spec.NodeSelector = override.NodeSelector
-	}
-}
-
-func replaceTolerations(override *base.DeploymentOverride, deployment *appsv1.Deployment) {
-	if len(override.Tolerations) > 0 {
-		deployment.Spec.Template.Spec.Tolerations = override.Tolerations
-	}
-}
-
-func replaceAffinities(override *base.DeploymentOverride, deployment *appsv1.Deployment) {
-	if override.Affinity != nil {
-		deployment.Spec.Template.Spec.Affinity = override.Affinity
-	}
-}
-
-func replaceResources(override *base.DeploymentOverride, deployment *appsv1.Deployment) {
-	if len(override.Resources) > 0 {
-		containers := deployment.Spec.Template.Spec.Containers
-		for i := range containers {
-			if override := find(override.Resources, containers[i].Name); override != nil {
-				merge(&override.Limits, &containers[i].Resources.Limits)
-				merge(&override.Requests, &containers[i].Resources.Requests)
-			}
-		}
-	}
-}
-
-func replaceEnv(override *base.DeploymentOverride, deployment *appsv1.Deployment) {
-	if len(override.Env) > 0 {
-		containers := deployment.Spec.Template.Spec.Containers
-		for i := range containers {
-			if override := findEnvOverride(override.Env, containers[i].Name); override != nil {
-				mergeEnv(&override.EnvVars, &containers[i].Env)
-			}
-		}
-	}
-}
diff --git a/vendor/knative.dev/operator/pkg/reconciler/common/ha.go b/vendor/knative.dev/operator/pkg/reconciler/common/ha.go
index c6764a4da..9dbc884f3 100644
--- a/vendor/knative.dev/operator/pkg/reconciler/common/ha.go
+++ b/vendor/knative.dev/operator/pkg/reconciler/common/ha.go
@@ -35,7 +35,7 @@ func haUnSupported(obj base.KComponent) sets.String {
 func HighAvailabilityTransform(obj base.KComponent, log *zap.SugaredLogger) mf.Transformer {
 	return func(u *unstructured.Unstructured) error {
 		// Use spec.deployments.replicas for the deployment instead of spec.high-availability.
-		for _, override := range obj.GetSpec().GetDeploymentOverride() {
+		for _, override := range obj.GetSpec().GetWorkloadOverrides() {
 			if override.Replicas != nil && override.Name == u.GetName() {
 				return nil
 			}
diff --git a/vendor/knative.dev/operator/pkg/reconciler/common/probe_override.go b/vendor/knative.dev/operator/pkg/reconciler/common/probe_override.go
new file mode 100644
index 000000000..5dc90d749
--- /dev/null
+++ b/vendor/knative.dev/operator/pkg/reconciler/common/probe_override.go
@@ -0,0 +1,46 @@
+/*
+Copyright 2022 The Knative Authors
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+*/
+
+package common
+
+import (
+v1 "k8s.io/api/core/v1"
+"k8s.io/apimachinery/pkg/util/json"
+"knative.dev/operator/pkg/apis/operator/base"
+)
+
+func mergeProbe(override, tgt *v1.Probe) {
+	if override == nil {
+		return
+	}
+	var merged v1.Probe
+	jtgt, _ := json.Marshal(*tgt)
+	_ = json.Unmarshal(jtgt, &merged)
+	jsrc, _ := json.Marshal(*override)
+	_ = json.Unmarshal(jsrc, &merged)
+	jmerged, _ := json.Marshal(merged)
+	_ = json.Unmarshal(jmerged, tgt)
+}
+
+func findProbeOverride(probes []base.ProbesRequirementsOverride, name string) *base.ProbesRequirementsOverride {
+	for _, override := range probes {
+		if override.Container == name {
+			return &override
+		}
+	}
+	return nil
+}
+
diff --git a/vendor/knative.dev/operator/pkg/reconciler/common/resources.go b/vendor/knative.dev/operator/pkg/reconciler/common/resources.go
index a042de85f..8a04e31e9 100644
--- a/vendor/knative.dev/operator/pkg/reconciler/common/resources.go
+++ b/vendor/knative.dev/operator/pkg/reconciler/common/resources.go
@@ -33,7 +33,7 @@ func ResourceRequirementsTransform(obj base.KComponent, log *zap.SugaredLogger)
 	return func(u *unstructured.Unstructured) error {
 		if u.GetKind() == "Deployment" {
 			// Use spec.deployments.resources for the deployment instead of spec.resources.
-			for _, override := range obj.GetSpec().GetDeploymentOverride() {
+			for _, override := range obj.GetSpec().GetWorkloadOverrides() {
 				if override.Name == u.GetName() && len(override.Resources) > 0 {
 					return nil
 				}
diff --git a/vendor/knative.dev/operator/pkg/reconciler/common/transformers.go b/vendor/knative.dev/operator/pkg/reconciler/common/transformers.go
index 3c23f8151..5ef756fb0 100644
--- a/vendor/knative.dev/operator/pkg/reconciler/common/transformers.go
+++ b/vendor/knative.dev/operator/pkg/reconciler/common/transformers.go
@@ -32,7 +32,7 @@ func transformers(ctx context.Context, obj base.KComponent) []mf.Transformer {
 		ImageTransform(obj.GetSpec().GetRegistry(), logger),
 		ConfigMapTransform(obj.GetSpec().GetConfig(), logger),
 		ResourceRequirementsTransform(obj, logger),
-		DeploymentsTransform(obj, logger),
+		OverridesTransform(obj.GetSpec().GetWorkloadOverrides(), logger),
 		ServicesTransform(obj, logger),
 	}
 }
diff --git a/vendor/knative.dev/operator/pkg/reconciler/common/workload_override.go b/vendor/knative.dev/operator/pkg/reconciler/common/workload_override.go
new file mode 100644
index 000000000..2b6077aa6
--- /dev/null
+++ b/vendor/knative.dev/operator/pkg/reconciler/common/workload_override.go
@@ -0,0 +1,198 @@
+/*
+Copyright 2020 The Knative Authors
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+*/
+
+package common
+
+import (
+	mf "github.com/manifestival/manifestival"
+	"go.uber.org/zap"
+	appsv1 "k8s.io/api/apps/v1"
+	corev1 "k8s.io/api/core/v1"
+	v1 "k8s.io/api/core/v1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
+	"k8s.io/client-go/kubernetes/scheme"
+
+	"knative.dev/operator/pkg/apis/operator/base"
+)
+
+// OverridesTransform transforms deployments based on the configuration in `spec.overrides`.
+func OverridesTransform(overrides []base.WorkloadOverride, log *zap.SugaredLogger) mf.Transformer {
+	if overrides == nil {
+		return nil
+	}
+	return func(u *unstructured.Unstructured) error {
+		for _, override := range overrides {
+			var obj metav1.Object
+			var ps *corev1.PodTemplateSpec
+
+			if u.GetKind() == "Deployment" && u.GetName() == override.Name {
+				deployment := &appsv1.Deployment{}
+				if err := scheme.Scheme.Convert(u, deployment, nil); err != nil {
+					return err
+				}
+				obj = deployment
+				ps = &deployment.Spec.Template
+				if override.Replicas != nil {
+					deployment.Spec.Replicas = override.Replicas
+				}
+			}
+			if u.GetKind() == "StatefulSet" && u.GetName() == override.Name {
+				ss := &appsv1.StatefulSet{}
+				if err := scheme.Scheme.Convert(u, ss, nil); err != nil {
+					return err
+				}
+				obj = ss
+				ps = &ss.Spec.Template
+				if override.Replicas != nil {
+					ss.Spec.Replicas = override.Replicas
+				}
+			}
+
+			if obj == nil {
+				continue
+			}
+
+			replaceLabels(&override, obj, ps)
+			replaceAnnotations(&override, obj, ps)
+			replaceNodeSelector(&override, ps)
+			replaceTolerations(&override, ps)
+			replaceAffinities(&override, ps)
+			replaceResources(&override, ps)
+			replaceEnv(&override, ps)
+			replaceProbes(&override, ps)
+
+			if err := scheme.Scheme.Convert(obj, u, nil); err != nil {
+				return err
+			}
+
+			// Avoid superfluous updates from converted zero defaults
+			u.SetCreationTimestamp(metav1.Time{})
+		}
+		return nil
+	}
+}
+
+func replaceAnnotations(override *base.WorkloadOverride, obj metav1.Object, ps *corev1.PodTemplateSpec) {
+	if obj.GetAnnotations() == nil {
+		obj.SetAnnotations(map[string]string{})
+	}
+	if ps.GetAnnotations() == nil {
+		ps.SetAnnotations(map[string]string{})
+	}
+	for key, val := range override.Annotations {
+		obj.GetAnnotations()[key] = val
+		ps.Annotations[key] = val
+	}
+}
+
+func replaceLabels(override *base.WorkloadOverride, obj metav1.Object, ps *corev1.PodTemplateSpec) {
+	if obj.GetLabels() == nil {
+		obj.SetLabels(map[string]string{})
+	}
+	if ps.GetLabels() == nil {
+		ps.Labels = map[string]string{}
+	}
+	for key, val := range override.Labels {
+		obj.GetLabels()[key] = val
+		ps.Labels[key] = val
+	}
+}
+
+func replaceNodeSelector(override *base.WorkloadOverride, ps *corev1.PodTemplateSpec) {
+	if len(override.NodeSelector) > 0 {
+		ps.Spec.NodeSelector = override.NodeSelector
+	}
+}
+
+func replaceTolerations(override *base.WorkloadOverride, ps *corev1.PodTemplateSpec) {
+	if len(override.Tolerations) > 0 {
+		ps.Spec.Tolerations = override.Tolerations
+	}
+}
+
+func replaceAffinities(override *base.WorkloadOverride, ps *corev1.PodTemplateSpec) {
+	if override.Affinity != nil {
+		ps.Spec.Affinity = override.Affinity
+	}
+}
+
+func replaceResources(override *base.WorkloadOverride, ps *corev1.PodTemplateSpec) {
+	if len(override.Resources) > 0 {
+		containers := ps.Spec.Containers
+		for i := range containers {
+			if override := find(override.Resources, containers[i].Name); override != nil {
+				merge(&override.Limits, &containers[i].Resources.Limits)
+				merge(&override.Requests, &containers[i].Resources.Requests)
+			}
+		}
+	}
+}
+
+func replaceEnv(override *base.WorkloadOverride, ps *corev1.PodTemplateSpec) {
+	if len(override.Env) > 0 {
+		containers := ps.Spec.Containers
+		for i := range containers {
+			if override := findEnvOverride(override.Env, containers[i].Name); override != nil {
+				mergeEnv(&override.EnvVars, &containers[i].Env)
+			}
+		}
+	}
+}
+
+func replaceProbes(override *base.WorkloadOverride, ps *corev1.PodTemplateSpec) {
+	if len(override.ReadinessProbes) > 0 {
+		containers := ps.Spec.Containers
+		for i := range containers {
+			if override := findProbeOverride(override.ReadinessProbes, containers[i].Name); override != nil {
+				overrideProbe := &v1.Probe{
+					InitialDelaySeconds:           override.InitialDelaySeconds,
+					TimeoutSeconds:                override.TimeoutSeconds,
+					PeriodSeconds:                 override.PeriodSeconds,
+					SuccessThreshold:              override.SuccessThreshold,
+					FailureThreshold:              override.FailureThreshold,
+					TerminationGracePeriodSeconds: override.TerminationGracePeriodSeconds,
+				}
+				if containers[i].ReadinessProbe == nil {
+					containers[i].ReadinessProbe = overrideProbe
+					continue
+				}
+				mergeProbe(overrideProbe, containers[i].ReadinessProbe)
+			}
+		}
+	}
+
+	if len(override.LivenessProbes) > 0 {
+		containers := ps.Spec.Containers
+		for i := range containers {
+			if override := findProbeOverride(override.LivenessProbes, containers[i].Name); override != nil {
+				overrideProbe := &v1.Probe{
+					InitialDelaySeconds:           override.InitialDelaySeconds,
+					TimeoutSeconds:                override.TimeoutSeconds,
+					PeriodSeconds:                 override.PeriodSeconds,
+					SuccessThreshold:              override.SuccessThreshold,
+					FailureThreshold:              override.FailureThreshold,
+					TerminationGracePeriodSeconds: override.TerminationGracePeriodSeconds,
+				}
+				if containers[i].LivenessProbe == nil {
+					containers[i].LivenessProbe = overrideProbe
+					continue
+				}
+				mergeProbe(overrideProbe, containers[i].LivenessProbe)
+			}
+		}
+	}
+}
