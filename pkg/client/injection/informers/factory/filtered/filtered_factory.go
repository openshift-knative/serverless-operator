// Code generated by injection-gen. DO NOT EDIT.

package filteredFactory

import (
	context "context"

	externalversions "github.com/openshift-knative/serverless-operator/pkg/client/informers/externalversions"
	client "github.com/openshift-knative/serverless-operator/pkg/client/injection/client"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	controller "knative.dev/pkg/controller"
	injection "knative.dev/pkg/injection"
	logging "knative.dev/pkg/logging"
)

func init() {
	injection.Default.RegisterInformerFactory(withInformerFactory)
}

// Key is used as the key for associating information with a context.Context.
type Key struct {
	Selector string
}

type LabelKey struct{}

func WithSelectors(ctx context.Context, selector ...string) context.Context {
	return context.WithValue(ctx, LabelKey{}, selector)
}

func withInformerFactory(ctx context.Context) context.Context {
	c := client.Get(ctx)
	untyped := ctx.Value(LabelKey{})
	if untyped == nil {
		logging.FromContext(ctx).Panic(
			"Unable to fetch labelkey from context.")
	}
	labelSelectors := untyped.([]string)
	for _, selector := range labelSelectors {
		selectorVal := selector
		opts := []externalversions.SharedInformerOption{}
		if injection.HasNamespaceScope(ctx) {
			opts = append(opts, externalversions.WithNamespace(injection.GetNamespaceScope(ctx)))
		}
		opts = append(opts, externalversions.WithTweakListOptions(func(l *v1.ListOptions) {
			l.LabelSelector = selectorVal
		}))
		ctx = context.WithValue(ctx, Key{Selector: selectorVal},
			externalversions.NewSharedInformerFactoryWithOptions(c, controller.GetResyncPeriod(ctx), opts...))
	}
	return ctx
}

// Get extracts the InformerFactory from the context.
func Get(ctx context.Context, selector string) externalversions.SharedInformerFactory {
	untyped := ctx.Value(Key{Selector: selector})
	if untyped == nil {
		logging.FromContext(ctx).Panicf(
			"Unable to fetch github.com/openshift-knative/serverless-operator/pkg/client/informers/externalversions.SharedInformerFactory with selector %s from context.", selector)
	}
	return untyped.(externalversions.SharedInformerFactory)
}
