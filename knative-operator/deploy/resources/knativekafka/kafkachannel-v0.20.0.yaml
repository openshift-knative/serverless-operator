---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kafka-addressable-resolver
  labels:
    kafka.eventing.knative.dev/release: "v0.20.0"
    duck.knative.dev/addressable: "true"
rules:
  - apiGroups:
      - messaging.knative.dev
    resources:
      - kafkachannels
      - kafkachannels/status
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kafka-channelable-manipulator
  labels:
    kafka.eventing.knative.dev/release: "v0.20.0"
    duck.knative.dev/channelable: "true"
rules:
  - apiGroups:
      - messaging.knative.dev
    resources:
      - kafkachannels
      - kafkachannels/status
    verbs:
      - create
      - get
      - list
      - watch
      - update
      - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kafka-ch-controller
  labels:
    kafka.eventing.knative.dev/release: "v0.20.0"
rules:
  - apiGroups:
      - messaging.knative.dev
    resources:
      - kafkachannels
      - kafkachannels/status
    verbs:
      - get
      - list
      - watch
      - update
      - patch
  - apiGroups:
      - messaging.knative.dev
    resources:
      - kafkachannels/finalizers
    verbs:
      - update
  - apiGroups:
      - "" # Core API group.
    resources:
      - configmaps
      - secrets
    verbs:
      - get
      - list
      - watch
      - create
  - apiGroups:
      - "" # Core API group.
    resources:
      - services
      - serviceaccounts
    verbs: &everything
      - get
      - list
      - watch
      - create
      - patch
      - update
  - apiGroups:
      - "" # Core API Group.
    resources:
      - configmaps
    resourceNames:
      - kafka-ch-dispatcher
    verbs:
      - update
  - apiGroups:
      - "" # Core API Group.
    resources:
      - events
    verbs:
      - create
      - patch
      - update
  - apiGroups:
      - "" # Core API group.
    resources:
      - endpoints
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - deployments
      - deployments/status
    verbs: *everything
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - rolebindings
    verbs: *everything
  - apiGroups:
      - "coordination.k8s.io"
    resources:
      - leases
    verbs: *everything
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka-ch-controller
  namespace: knative-eventing
  labels:
    kafka.eventing.knative.dev/release: "v0.20.0"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kafka-ch-dispatcher
  labels:
    kafka.eventing.knative.dev/release: "v0.20.0"
rules:
  - apiGroups:
      - messaging.knative.dev
    resources:
      - kafkachannels
    verbs:
      - get
      - list
      - watch
      - patch
  - apiGroups:
      - messaging.knative.dev
    resources:
      - kafkachannels/status
    verbs:
      - get
      - update
      - patch
  - apiGroups:
      - "" # Core API group.
    resources:
      - events
    verbs:
      - create
      - patch
      - update
  - apiGroups:
      - messaging.knative.dev
    resources:
      - kafkachannels
    verbs:
      - get
      - list
      - watch
      - patch
  - apiGroups:
      - ""
    resources:
      - configmaps
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "" # Core API Group.
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - get
      - list
      - watch
      - create
      - patch
      - update
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka-ch-dispatcher
  namespace: knative-eventing
  labels:
    kafka.eventing.knative.dev/release: "v0.20.0"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kafka-webhook
  labels:
    kafka.eventing.knative.dev/release: "v0.20.0"
rules:
  - apiGroups:
      - ""
    resources:
      - "configmaps"
    verbs:
      - "get"
      - "list"
      - "watch"
  - apiGroups:
      - ""
    resources:
      - "secrets"
    verbs:
      - "get"
      - "create"
      - "list"
      - "watch"
      - "update"
  - apiGroups:
      - "apps"
    resources:
      - "deployments"
    verbs:
      - "get"
  - apiGroups:
      - "apps"
    resources:
      - "deployments/finalizers"
    verbs:
      - update
  - apiGroups:
      - "admissionregistration.k8s.io"
    resources:
      - "mutatingwebhookconfigurations"
      - "validatingwebhookconfigurations"
    verbs: &everything
      - "get"
      - "list"
      - "create"
      - "update"
      - "delete"
      - "patch"
      - "watch"
  - apiGroups:
      - "messaging.knative.dev"
    resources:
      - "kafkachannels"
      - "kafkachannels/status"
    verbs:
      - "get"
      - "list"
      - "watch"
  - apiGroups:
      - "coordination.k8s.io"
    resources:
      - "leases"
    verbs: *everything
  - apiGroups:
      - "apiextensions.k8s.io"
    resources:
      - "customresourcedefinitions"
    verbs:
      - "get"
      - "list"
      - "create"
      - "update"
      - "delete"
      - "patch"
      - "watch"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka-webhook
  namespace: knative-eventing
  labels:
    kafka.eventing.knative.dev/release: "v0.20.0"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kafka-ch-controller
  labels:
    kafka.eventing.knative.dev/release: "v0.20.0"
subjects:
- kind: ServiceAccount
  name: kafka-ch-controller
  namespace: knative-eventing
roleRef:
  kind: ClusterRole
  name: kafka-ch-controller
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kafka-ch-dispatcher
  labels:
    kafka.eventing.knative.dev/release: "v0.20.0"
subjects:
- kind: ServiceAccount
  name: kafka-ch-dispatcher
  namespace: knative-eventing
roleRef:
  kind: ClusterRole
  name: kafka-ch-dispatcher
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kafka-webhook
  labels:
    kafka.eventing.knative.dev/release: "v0.20.0"
subjects:
- kind: ServiceAccount
  name: kafka-webhook
  namespace: knative-eventing
roleRef:
  kind: ClusterRole
  name: kafka-webhook
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: kafkachannels.messaging.knative.dev
  labels:
    kafka.eventing.knative.dev/release: "v0.20.0"
    knative.dev/crd-install: "true"
    messaging.knative.dev/subscribable: "true"
    duck.knative.dev/addressable: "true"
spec:
  group: messaging.knative.dev
  versions:
    - &version
      name: v1alpha1
      served: true
      storage: true
      subresources:
        status: { }
      schema:
        openAPIV3Schema: &openAPIV3Schema
          type: object
          x-kubernetes-preserve-unknown-fields: true
      additionalPrinterColumns:
        - name: Ready
          type: string
          jsonPath: ".status.conditions[?(@.type==\"Ready\")].status"
        - name: Reason
          type: string
          jsonPath: ".status.conditions[?(@.type==\"Ready\")].reason"
        - name: URL
          type: string
          jsonPath: .status.address.url
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
    - <<: *version
      name: v1beta1
      served: true
      storage: false
      schema:
        openAPIV3Schema:
          <<: *openAPIV3Schema
  names:
    kind: KafkaChannel
    plural: kafkachannels
    singular: kafkachannel
    categories:
      - all
      - knative
      - messaging
      - channel
    shortNames:
      - kc
  scope: Namespaced
  conversion:
    strategy: Webhook
    webhook:
      conversionReviewVersions: [ "v1", "v1beta1" ]
      clientConfig:
        service:
          name: kafka-webhook
          namespace: knative-eventing
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-kafka
  namespace: knative-eventing
data:
  bootstrapServers: REPLACE_WITH_CLUSTER_URL
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-webhook
  namespace: knative-eventing
  labels:
    kafka.eventing.knative.dev/release: "v0.20.0"
    role: kafka-webhook
spec:
  ports:
    - name: https-webhook
      port: 443
      targetPort: 8443
  selector:
    role: kafka-webhook
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-ch-controller
  namespace: knative-eventing
  labels:
    kafka.eventing.knative.dev/release: "v0.20.0"
spec:
  replicas: 1
  selector:
    matchLabels: &labels
      messaging.knative.dev/channel: kafka-channel
      messaging.knative.dev/role: controller
  template:
    metadata:
      labels: *labels
    spec:
      serviceAccountName: kafka-ch-controller
      containers:
      - name: controller
        image: gcr.io/knative-releases/knative.dev/eventing-kafka/cmd/channel/consolidated/controller@sha256:50e59d03a0f2220ffec22adaaed8040d8e3b66ad9792d41eefea8425e9420ac5
        env:
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: METRICS_DOMAIN
          value: knative.dev/eventing
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: CONFIG_LEADERELECTION_NAME
          value: config-leader-election
        - name: DISPATCHER_IMAGE
          value: gcr.io/knative-releases/knative.dev/eventing-kafka/cmd/channel/consolidated/dispatcher@sha256:91077fc39852f4043d43dfdf771c300d49f17bb23d97b301f05fe8da8fd0e206
        ports:
        - containerPort: 9090
          name: metrics
        volumeMounts:
        - name: config-logging
          mountPath: /etc/config-logging
      volumes:
      - name: config-logging
        configMap:
          name: config-logging
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-ch-dispatcher
  namespace: knative-eventing
  labels:
    kafka.eventing.knative.dev/release: "v0.20.0"
spec:
  replicas: 0
  selector:
    matchLabels:
      messaging.knative.dev/channel: kafka-channel
      messaging.knative.dev/role: dispatcher
  template:
    metadata:
      labels:
        # Do not change. Used by the controller for probing.
        messaging.knative.dev/channel: kafka-channel
        # Do not change. Used by the controller for probing.
        messaging.knative.dev/role: dispatcher
        kafka.eventing.knative.dev/release: "v0.20.0"
    spec:
      containers:
      - name: dispatcher
        image: gcr.io/knative-releases/knative.dev/eventing-kafka/cmd/channel/consolidated/dispatcher@sha256:91077fc39852f4043d43dfdf771c300d49f17bb23d97b301f05fe8da8fd0e206
        env:
        - name: SYSTEM_NAMESPACE
          value: ''
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: METRICS_DOMAIN
          value: knative.dev/eventing
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: CONFIG_LEADERELECTION_NAME
          value: config-leader-election
        - name: CONTAINER_NAME
          value: dispatcher
        ports:
        - containerPort: 9090
          name: metrics
          protocol: TCP
        - containerPort: 8081
          name: sub-status
          protocol: TCP
        volumeMounts:
        - name: config-kafka
          mountPath: /etc/config-kafka
      serviceAccountName: kafka-ch-dispatcher
      volumes:
      - name: config-kafka
        configMap:
          name: config-kafka
---
apiVersion: v1
kind: Service
metadata:
  labels:
    messaging.knative.dev/channel: kafka-channel
    messaging.knative.dev/role: dispatcher
  name: kafka-ch-dispatcher
  namespace: knative-eventing
spec:
  ports:
  - name: http-dispatcher
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: http-sub-status
    port: 8081
    protocol: TCP
    targetPort: 8081
  selector:
    messaging.knative.dev/channel: kafka-channel
    messaging.knative.dev/role: dispatcher
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: defaulting.webhook.kafka.messaging.knative.dev
  labels:
    kafka.eventing.knative.dev/release: "v0.20.0"
webhooks:
- admissionReviewVersions: ["v1", "v1beta1"]
  clientConfig:
    service:
      name: kafka-webhook
      namespace: knative-eventing
  sideEffects: None
  failurePolicy: Fail
  name: defaulting.webhook.kafka.messaging.knative.dev
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: validation.webhook.kafka.messaging.knative.dev
  labels:
    kafka.eventing.knative.dev/release: "v0.20.0"
webhooks:
- admissionReviewVersions: ["v1", "v1beta1"]
  clientConfig:
    service:
      name: kafka-webhook
      namespace: knative-eventing
  sideEffects: None
  failurePolicy: Fail
  name: validation.webhook.kafka.messaging.knative.dev
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-webhook
  namespace: knative-eventing
  labels:
    kafka.eventing.knative.dev/release: "v0.20.0"
spec:
  replicas: 1
  selector:
    matchLabels: &labels
      app: kafka-webhook
      role: kafka-webhook
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels: *labels
    spec:
      serviceAccountName: kafka-webhook
      containers:
      - name: kafka-webhook
        terminationMessagePolicy: FallbackToLogsOnError
        image: gcr.io/knative-releases/knative.dev/eventing-kafka/cmd/webhook@sha256:46c94c8d196b751c2d11b16de34d5a60a0a14d1572afd563444bec26b1db8aba
        env:
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: METRICS_DOMAIN
          value: knative.dev/eventing
        - name: WEBHOOK_NAME
          value: kafka-webhook
        - name: WEBHOOK_PORT
          value: "8443"
        ports:
        - name: https-webhook
          containerPort: 8443
        - name: metrics
          containerPort: 9090
        - name: profiling
          containerPort: 8008
        readinessProbe: &probe
          periodSeconds: 1
          httpGet:
            scheme: HTTPS
            port: 8443
            httpHeaders:
            - name: k-kubelet-probe
              value: "webhook"
        livenessProbe:
          <<: *probe
          initialDelaySeconds: 20
      terminationGracePeriodSeconds: 300
---
apiVersion: v1
kind: Secret
metadata:
  name: messaging-webhook-certs
  namespace: knative-eventing
  labels:
    kafka.eventing.knative.dev/release: "v0.20.0"
