apiVersion: v1
kind: Namespace
metadata:
  name: knative-sources
  labels:
    contrib.eventing.knative.dev/release: "v0.17.1"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka-controller-manager
  namespace: knative-sources
  labels:
    contrib.eventing.knative.dev/release: "v0.17.1"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: eventing-sources-kafka-controller
  labels:
    contrib.eventing.knative.dev/release: "v0.17.1"
rules:
- apiGroups:
  - sources.knative.dev
  resources:
  - kafkasources
  - kafkasources/finalizers
  verbs: &everything
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - sources.knative.dev
  resources:
  - kafkasources/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - bindings.knative.dev
  resources:
  - kafkabindings
  - kafkabindings/finalizers
  verbs: &everything
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - bindings.knative.dev
  resources:
  - kafkabindings/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs: *everything
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - endpoints
  - persistentvolumeclaims
  - events
  - configmaps
  - secrets
  verbs: *everything
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - create
  - update
  - list
  - watch
  - patch
- apiGroups:
  - "coordination.k8s.io"
  resources:
  - leases
  verbs: *everything
- apiGroups:
  - "admissionregistration.k8s.io"
  resources:
  - "mutatingwebhookconfigurations"
  - "validatingwebhookconfigurations"
  verbs: &everything
  - "get"
  - "list"
  - "create"
  - "update"
  - "delete"
  - "patch"
  - "watch"
- apiGroups:
  - "apiextensions.k8s.io"
  resources:
  - "customresourcedefinitions"
  verbs:
  - "get"
  - "list"
  - "create"
  - "update"
  - "delete"
  - "patch"
  - "watch"
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: eventing-contrib-kafka-source-observer
  labels:
    contrib.eventing.knative.dev/release: "v0.17.1"
    duck.knative.dev/source: "true"
rules:
- apiGroups:
  - "sources.knative.dev"
  resources:
  - "kafkasources"
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: eventing-sources-kafka-controller
  labels:
    contrib.eventing.knative.dev/release: "v0.17.1"
subjects:
- kind: ServiceAccount
  name: kafka-controller-manager
  namespace: knative-sources
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: eventing-sources-kafka-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: eventing-sources-kafka-controller-addressable-resolver
  labels:
    contrib.eventing.knative.dev/release: "v0.17.1"
subjects:
- kind: ServiceAccount
  name: kafka-controller-manager
  namespace: knative-sources
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: addressable-resolver
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: eventing-sources-kafka-controller-podspecable-binding
  labels:
    contrib.eventing.knative.dev/release: "v0.17.1"
subjects:
- kind: ServiceAccount
  name: kafka-controller-manager
  namespace: knative-sources
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: podspecable-binding
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    contrib.eventing.knative.dev/release: "v0.17.1"
    duck.knative.dev/binding: "true"
    knative.dev/crd-install: "true"
  name: kafkabindings.bindings.knative.dev
spec:
  group: bindings.knative.dev
  names:
    categories:
    - all
    - knative
    - eventing
    - bindings
    kind: KafkaBinding
    plural: kafkabindings
  scope: Namespaced
  subresources:
    status: {}
  additionalPrinterColumns:
  - name: BootstrapServers
    type: string
    JSONPath: ".spec.bootstrapServers"
  - name: Ready
    type: string
    JSONPath: ".status.conditions[?(@.type==\"Ready\")].status"
  - name: Reason
    type: string
    JSONPath: ".status.conditions[?(@.type==\"Ready\")].reason"
  - name: Age
    type: date
    JSONPath: .metadata.creationTimestamp
  versions:
  - name: v1alpha1
    served: true
    storage: true
  - name: v1beta1
    served: true
    storage: false
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    contrib.eventing.knative.dev/release: "v0.17.1"
    eventing.knative.dev/source: "true"
    duck.knative.dev/source: "true"
    knative.dev/crd-install: "true"
  annotations:
    registry.knative.dev/eventTypes: |
      [
        { "type": "dev.knative.kafka.event" }
      ]
  name: kafkasources.sources.knative.dev
spec:
  group: sources.knative.dev
  preserveUnknownFields: false
  validation:
    openAPIV3Schema:
      type: object
      x-kubernetes-preserve-unknown-fields: true
  names:
    categories:
    - all
    - knative
    - eventing
    - sources
    kind: KafkaSource
    plural: kafkasources
  scope: Namespaced
  subresources:
    status: {}
  conversion:
    strategy: Webhook
    webhookClientConfig:
      service:
        name: kafka-source-webhook
        namespace: knative-sources
  additionalPrinterColumns:
  - name: Topics
    type: string
    JSONPath: ".spec.topics"
  - name: BootstrapServers
    type: string
    JSONPath: ".spec.bootstrapServers"
  - name: Ready
    type: string
    JSONPath: ".status.conditions[?(@.type==\"Ready\")].status"
  - name: Reason
    type: string
    JSONPath: ".status.conditions[?(@.type==\"Ready\")].reason"
  - name: Age
    type: date
    JSONPath: .metadata.creationTimestamp
  versions:
  - name: v1alpha1
    served: true
    storage: true
  - name: v1beta1
    served: true
    storage: false
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-controller
  namespace: knative-sources
  labels:
    contrib.eventing.knative.dev/release: "v0.17.1"
    control-plane: kafka-controller-manager
spec:
  selector:
    control-plane: kafka-controller-manager
  ports:
  - name: https-kafka
    port: 443
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-controller-manager
  namespace: knative-sources
  labels:
    contrib.eventing.knative.dev/release: "v0.17.1"
    control-plane: kafka-controller-manager
spec:
  replicas: 1
  selector:
    matchLabels: &labels
      control-plane: kafka-controller-manager
  template:
    metadata:
      labels: *labels
    spec:
      serviceAccountName: kafka-controller-manager
      containers:
      - name: manager
        image: gcr.io/knative-releases/knative.dev/eventing-contrib/kafka/source/cmd/controller@sha256:d7306e7b01f61172919bd7bfd304c4892388b675e48e16fa71063c51ef440c1a
        env:
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: METRICS_DOMAIN
          value: knative.dev/sources
        - name: CONFIG_OBSERVABILITY_NAME
          value: config-observability
        - name: CONFIG_LEADERELECTION_NAME
          value: config-leader-election-kafka
        - name: KAFKA_RA_IMAGE
          value: gcr.io/knative-releases/knative.dev/eventing-contrib/kafka/source/cmd/receive_adapter@sha256:2bb36e62f1b4bd33eda26257371bc4f19db38da2062ebc712fce0fc42151f3ea
        volumeMounts:
        resources:
          requests:
            cpu: 20m
            memory: 20Mi
        readinessProbe: &probe
          periodSeconds: 1
          httpGet:
            scheme: HTTPS
            port: 8443
            httpHeaders:
            - name: k-kubelet-probe
              value: "webhook"
        livenessProbe:
          <<: *probe
          initialDelaySeconds: 20
      serviceAccount: kafka-controller-manager
      terminationGracePeriodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  labels:
    role: webhook
    contrib.eventing.knative.dev/release: "v0.17.1"
  name: kafka-source-webhook
  namespace: knative-sources
spec:
  ports:
  - name: https-webhook
    port: 443
    targetPort: 8443
  selector:
    control-plane: kafka-controller-manager
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: defaulting.webhook.kafka.sources.knative.dev
  labels:
    contrib.eventing.knative.dev/release: "v0.17.1"
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    service:
      name: kafka-source-webhook
      namespace: knative-sources
  failurePolicy: Fail
  name: defaulting.webhook.kafka.sources.knative.dev
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: kafkabindings.webhook.kafka.sources.knative.dev
  labels:
    contrib.eventing.knative.dev/release: "v0.17.1"
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    service:
      name: kafka-source-webhook
      namespace: knative-sources
  failurePolicy: Fail
  name: kafkabindings.webhook.kafka.sources.knative.dev
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: validation.webhook.kafka.sources.knative.dev
  labels:
    contrib.eventing.knative.dev/release: "v0.17.1"
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    service:
      name: kafka-source-webhook
      namespace: knative-sources
  failurePolicy: Fail
  name: validation.webhook.kafka.sources.knative.dev
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: config.webhook.kafka.sources.knative.dev
  labels:
    contrib.eventing.knative.dev/release: "v0.17.1"
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    service:
      name: kafka-source-webhook
      namespace: knative-sources
  failurePolicy: Fail
  name: config.webhook.kafka.sources.knative.dev
  namespaceSelector:
    matchExpressions:
    - key: contrib.eventing.knative.dev/release
      operator: Exists
---
apiVersion: v1
kind: Secret
metadata:
  name: kafka-source-webhook-certs
  namespace: knative-sources
  labels:
    contrib.eventing.knative.dev/release: "v0.17.1"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-leader-election-kafka
  namespace: knative-sources
data:
  resourceLock: "leases"
  leaseDuration: "15s"
  renewDeadline: "10s"
  retryPeriod: "2s"
  _example: |
    resourceLock: "leases"
    leaseDuration: "15s"
    renewDeadline: "10s"
    retryPeriod: "2s"
    enabledComponents: "kafka-controller"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-logging
  namespace: knative-sources
data:
  zap-logger-config: |
    {
      "level": "debug",
      "development": true,
      "outputPaths": ["stdout"],
      "errorOutputPaths": ["stderr"],
      "encoding": "json",
      "encoderConfig": {
        "timeKey": "ts",
        "levelKey": "level",
        "nameKey": "logger",
        "callerKey": "caller",
        "messageKey": "msg",
        "stacktraceKey": "stacktrace",
        "lineEnding": "",
        "levelEncoder": "",
        "timeEncoder": "iso8601",
        "durationEncoder": "",
        "callerEncoder": ""
      }
    }
  loglevel.controller: "info"
  loglevel.webhook: "info"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-observability
  namespace: knative-sources
data:
  _example: |
    logging.enable-var-log-collection: false
    logging.fluentd-sidecar-image: k8s.gcr.io/fluentd-elasticsearch:v2.0.4
    logging.fluentd-sidecar-output-config: |
      <filter **>
        @type parser
        key_name log
        <parse>
          @type multi_format
          <pattern>
            format json
            time_key fluentd-time # fluentd-time is reserved for structured logs
            time_format %Y-%m-%dT%H:%M:%S.%NZ
          </pattern>
          <pattern>
            format none
            message_key log
          </pattern>
        </parse>
      </filter>
      <match **>
        @id elasticsearch
        @type elasticsearch
        @log_level info
        include_tag_key true
        host elasticsearch-logging.knative-monitoring
        port 9200
        logstash_format true
        <buffer>
          @type file
          path /var/log/fluentd-buffers/kubernetes.system.buffer
          flush_mode interval
          retry_type exponential_backoff
          flush_thread_count 2
          flush_interval 5s
          retry_forever
          retry_max_interval 30
          chunk_limit_size 2M
          queue_limit_length 8
          overflow_action block
        </buffer>
      </match>
    logging.revision-url-template: |
      http://localhost:8001/api/v1/namespaces/knative-monitoring/services/kibana-logging/proxy/app/kibana#/discover?_a=(query:(match:(kubernetes.labels.knative-dev%2FrevisionUID:(query:'${REVISION_UID}',type:phrase))))
    logging.request-log-template: '{"httpRequest": {"requestMethod": "{{.Request.Method}}", "requestUrl": "{{js .Request.RequestURI}}", "requestSize": "{{.Request.ContentLength}}", "status": {{.Response.Code}}, "responseSize": "{{.Response.Size}}", "userAgent": "{{js .Request.UserAgent}}", "remoteIp": "{{js .Request.RemoteAddr}}", "serverIp": "{{.Revision.PodIP}}", "referer": "{{js .Request.Referer}}", "latency": "{{.Response.Latency}}s", "protocol": "{{.Request.Proto}}"}, "traceId": "{{index .Request.Header "X-B3-Traceid"}}"}'
    metrics.backend-destination: prometheus
    metrics.request-metrics-backend-destination: prometheus
    metrics.stackdriver-project-id: "<your stackdriver project id>"
    metrics.allow-stackdriver-custom-metrics: "false"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-tracing
  namespace: knative-sources
  labels:
    contrib.eventing.knative.dev/release: "v0.17.1"
    knative.dev/config-propagation: original
    knative.dev/config-category: eventing
data:
  _example: |
    backend: "none"
    zipkin-endpoint: "http://zipkin.istio-system.svc.cluster.local:9411/api/v2/spans"
    stackdriver-project-id: "my-project"
    debug: "false"
    sample-rate: "0.1"
---
