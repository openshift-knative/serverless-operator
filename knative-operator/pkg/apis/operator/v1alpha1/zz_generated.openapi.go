// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/openshift-knative/serverless-operator/knative-operator/pkg/apis/operator/v1alpha1.KnativeKafka":       schema_pkg_apis_operator_v1alpha1_KnativeKafka(ref),
		"github.com/openshift-knative/serverless-operator/knative-operator/pkg/apis/operator/v1alpha1.KnativeKafkaSpec":   schema_pkg_apis_operator_v1alpha1_KnativeKafkaSpec(ref),
		"github.com/openshift-knative/serverless-operator/knative-operator/pkg/apis/operator/v1alpha1.KnativeKafkaStatus": schema_pkg_apis_operator_v1alpha1_KnativeKafkaStatus(ref),
	}
}

func schema_pkg_apis_operator_v1alpha1_KnativeKafka(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KnativeKafka is the Schema for the knativekafkas API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/openshift-knative/serverless-operator/knative-operator/pkg/apis/operator/v1alpha1.KnativeKafkaSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/openshift-knative/serverless-operator/knative-operator/pkg/apis/operator/v1alpha1.KnativeKafkaStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/openshift-knative/serverless-operator/knative-operator/pkg/apis/operator/v1alpha1.KnativeKafkaSpec", "github.com/openshift-knative/serverless-operator/knative-operator/pkg/apis/operator/v1alpha1.KnativeKafkaStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_operator_v1alpha1_KnativeKafkaSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KnativeKafkaSpec defines the desired state of KnativeKafka",
				Properties: map[string]spec.Schema{
					"source": {
						SchemaProps: spec.SchemaProps{
							Description: "Allows configuration for KafkaSource installation",
							Ref:         ref("github.com/openshift-knative/serverless-operator/knative-operator/pkg/apis/operator/v1alpha1.Source"),
						},
					},
					"channel": {
						SchemaProps: spec.SchemaProps{
							Description: "Allows configuration for KafkaChannel installation",
							Ref:         ref("github.com/openshift-knative/serverless-operator/knative-operator/pkg/apis/operator/v1alpha1.Channel"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/openshift-knative/serverless-operator/knative-operator/pkg/apis/operator/v1alpha1.Channel", "github.com/openshift-knative/serverless-operator/knative-operator/pkg/apis/operator/v1alpha1.Source"},
	}
}

func schema_pkg_apis_operator_v1alpha1_KnativeKafkaStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KnativeKafkaStatus defines the observed state of KnativeKafka",
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions the latest available observations of a resource's current state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("knative.dev/pkg/apis.Condition"),
									},
								},
							},
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "The version of the installed release",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"knative.dev/pkg/apis.Condition"},
	}
}
