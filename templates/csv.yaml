apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    operatorframework.io/suggested-namespace: "openshift-serverless"
    operatorframework.io/cluster-monitoring: "true"
    alm-examples: |-
      [
        {
          "apiVersion": "operator.knative.dev/v1alpha1",
          "kind": "KnativeServing",
          "metadata": {
            "name": "knative-serving"
          },
          "spec": {
          }
        },
        {
          "apiVersion": "operator.knative.dev/v1alpha1",
          "kind": "KnativeEventing",
          "metadata": {
            "name": "knative-eventing"
          },
          "spec": {
          }
        },
        {
          "apiVersion": "operator.serverless.openshift.io/v1alpha1",
          "kind": "KnativeKafka",
          "metadata": {
            "name": "knative-kafka"
          },
          "spec": {
            "source": {
              "enabled": false
            },
            "channel": {
              "enabled": false,
              "bootstrapServers": "REPLACE_WITH_COMMA_SEPARATED_KAFKA_BOOTSTRAP_SERVERS"
            }
          }
        }
      ]
    capabilities: Full Lifecycle
    categories: Networking,Integration & Delivery,Cloud Provider,Developer Tools
    certified: "false"
    createdAt: "2020-04-20T17:00:00Z"
    description: |-
      Provides a collection of API's based on Knative to support deploying and serving
      of serverless applications and functions.
    repository: https://github.com/openshift-knative/serverless-operator
    support: Red Hat
    olm.skipRange:
  labels:
    operatorframework.io/arch.amd64: supported
    operatorframework.io/arch.ppc64le: supported
    operatorframework.io/arch.s390x: supported
  name:
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - description: Represents an installation of a particular version of Knative Serving
      displayName: Knative Serving
      kind: KnativeServing
      name: knativeservings.operator.knative.dev
      statusDescriptors:
      - description: The version of Knative Serving installed
        displayName: Version
        path: version
      - description: Conditions of Knative Serving installed
        displayName: Conditions
        path: conditions
        x-descriptors:
        - 'urn:alm:descriptor:io.kubernetes.conditions'
      version: v1alpha1
    - description: Represents an installation of a particular version of Knative Eventing
      displayName: Knative Eventing
      kind: KnativeEventing
      name: knativeeventings.operator.knative.dev
      statusDescriptors:
      - description: The version of Knative Eventing installed
        displayName: Version
        path: version
      version: v1alpha1
    - description: Represents an installation of a particular version of Knative Kafka components
      displayName: Knative Kafka
      kind: KnativeKafka
      name: knativekafkas.operator.serverless.openshift.io
      version: v1alpha1
  minKubeVersion:
  description: |-
    The Red Hat OpenShift Serverless operator provides a collection of APIs that
    enables containers, microservices and functions to run "serverless".
    Serverless applications can scale up and down (to zero) on demand and be triggered by a
    number of event sources. OpenShift Serverless integrates with a number of
    platform services, such as Metering and Monitoring and it is based on the open
    source project Knative.

    # Prerequisites
    Knative Serving (and Knative Eventing respectively) can only be installed into the
    `knative-serving` (`knative-eventing`) namespace. These namespaces will be
    automatically created when installing the operator.

    The components provided with the OpenShift Serverless operator require minimum cluster sizes on
    OpenShift Container Platform. For more information, see the documentation on [Getting started
    with OpenShift Serverless](https://access.redhat.com/documentation/en-us/openshift_container_platform/__OCP_TARGET__/html-single/serverless_applications/index#serverless-getting-started).

    # Supported Features
    - **Easy to get started:** Provides a simplified developer experience to deploy
      and run cloud native applications on Kubernetes, providing powerful
      abstractions.
    - **Immutable Revisions:** Deploy new features performing canary, A/B or
      blue-green testing with gradual traffic rollout following best practices.
    - **Use any programming language or runtime of choice:** From Java, Python, Go
      and JavaScript to Quarkus, SpringBoot or Node.js.
    - **Automatic scaling:** Removes the requirement to configure numbers of replicas
      or idling behavior. Applications automatically scale to zero when not in use,
      or scale up to meet demand, with built in reliability and fault tolerance.
    - **Event Driven Applications:** You can build loosely coupled, distributed applications
      that can be connected to a variety of either built in or third party event sources,
      powered by operators.
    - **Ready for the hybrid cloud:** Provides true, portable serverless functionality,
      that can run anywhere OpenShift Container Platform runs. You can leverage data
      locality and SaaS as you need it.

    # Components & APIs
    This operator provides the following components:

    ## Knative Serving
    Knative Serving builds on Kubernetes to support deploying and serving of applications and functions as serverless containers.
    Serving simplifies the application deployment, dynamically scales based on in incoming traffic and supports custom rollout strategies with traffic splitting.
    Other features include:
    - Simplified deployment of serverless containers
    - Traffic-based auto-scaling, including scale-to-zero
    - Routing and network programming
    - Point-in-time application snapshots and their configurations

    ## Knative Eventing
    Knative Eventing provides a platform that offers composable primitives to enable late-binding event sources and
    event consumers.
    Knative Eventing supports the following architectural cloud-native concepts:

    - Services are loosely coupled during development and deployed independently to production
    - A producer can generate events before a consumer is listening, and a consumer can express an interest in an event or class of events that are not yet being produced.
    - Services can be connected to create new applications
       * without modifying producer or consumer, and
       * with the ability to select a specific subset of events from a particular producer

    ## Serverless functions
    Serverless functions extend Knative allowing developers to write functions that let them focus on business logic.
    These functions are deployed as Knative Services and take advantage of Knative Serving and Eventing.
    Serverless functions bring greater efficiency, more scalability and faster development that facilitate rapid go-to-market.

    Other features include:
    - Based on Buildpacks
    - Quarkus, Node and Go support
    - Local developer experience through the kn CLI
    - Project templates
    - Support for receiving CloudEvents and plain HTTP requests

    ## Knative CLI `kn`
    The Knative client `kn` allows you to create Knative resources from the command line or from within
    Shell scripts.
    With its extensive help pages and autocompletion support, it frees you from memorizing the detailed structure of the Knative resource schemas.

    `kn` offers you:
    - Full support for managing all features of Knative Serving: Services, Revisions and Routes
    - Support for managing Knative Eventing entities: Sources, Brokers, Triggers, Channels and Subscriptions
    - A kubectl-like plugin architecture to extend the built-in functionality
    - Easy integration of Knative into Tekton pipelines by using `kn` in a Tekton task
    - Support for creating, building and deploying serverless functions for multiple runtimes (Node, Quarkus, Golang)

    # Further Information
    For documentation on OpenShift Serverless, see:
    - [Installation
    Guide](https://access.redhat.com/documentation/en-us/openshift_container_platform/__OCP_TARGET__/html/serverless_applications/installing-openshift-serverless-1)
    - [Getting
    started](https://access.redhat.com/documentation/en-us/openshift_container_platform/__OCP_TARGET__/html/serverless_applications/serverless-getting-started)
  displayName: Red Hat OpenShift Serverless
  icon:
  - base64data: PHN2ZyBpZD0iTGF5ZXJfMSIgZGF0YS1uYW1lPSJMYXllciAxIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxMDAgMTAwIj48ZGVmcz48c3R5bGU+LmNscy0xe2ZpbGw6I2UwMzQwMDt9LmNscy0ye2ZpbGw6I2NlMmUwMDt9LmNscy0ze2ZpbGw6bm9uZTt9LmNscy00e2ZpbGw6I2ZmZjt9LmNscy01e2ZpbGw6I2RjZGNkYzt9LmNscy02e2ZpbGw6I2FhYTt9PC9zdHlsZT48L2RlZnM+PHRpdGxlPlJlZF9IYXQtT3BlbnNoaWZ0NC1DYXRhbG9nX0ljb25zLVNlcnZlcmxlc3M8L3RpdGxlPjxjaXJjbGUgY2xhc3M9ImNscy0xIiBjeD0iNTAiIGN5PSI1MCIgcj0iNTAiLz48cGF0aCBjbGFzcz0iY2xzLTIiIGQ9Ik04NS4zNiwxNC42NEE1MCw1MCwwLDAsMSwxNC42NCw4NS4zNloiLz48cGF0aCBjbGFzcz0iY2xzLTMiIGQ9Ik00MC41Nyw0Ny40MmEzLjg5LDMuODksMCwxLDAsMy44OCwzLjg4QTMuODksMy44OSwwLDAsMCw0MC41Nyw0Ny40MloiLz48cGF0aCBjbGFzcz0iY2xzLTMiIGQ9Ik0yMS40Miw0Ny40MkEzLjg5LDMuODksMCwxLDAsMjUuMyw1MS4zLDMuODksMy44OSwwLDAsMCwyMS40Miw0Ny40MloiLz48cGF0aCBjbGFzcz0iY2xzLTQiIGQ9Ik01MC4wOSw0OC44NmgtLjE4YTQuMTEsNC4xMSwwLDAsMS0zLjI2LTEuNjMsNy42OSw3LjY5LDAsMCwwLTEyLjE2LDAsNC4xMyw0LjEzLDAsMCwxLTMuMjYsMS42M0gzMWE0LjA5LDQuMDksMCwwLDEtMy4yNS0xLjYzQTcuNjksNy42OSwwLDAsMCwxNCw1MS45M2gwVjY0LjZhMi43OSwyLjc5LDAsMCwwLDIuNzksMi43OWgxNS44TDUxLjM0LDQ4LjY2QTQsNCwwLDAsMSw1MC4wOSw0OC44NloiLz48cGF0aCBjbGFzcz0iY2xzLTUiIGQ9Ik03OC4wNSw0NC4yNWE3LjY1LDcuNjUsMCwwLDAtNS44NSwzQTQuMSw0LjEsMCwwLDEsNjksNDguODZoLS4xOWE0LjEzLDQuMTMsMCwwLDEtMy4yNi0xLjYzLDcuNjksNy42OSwwLDAsMC0xMi4xNiwwLDQuMTYsNC4xNiwwLDAsMS0yLDEuNDNMMzIuNjEsNjcuMzlIODMuMTlBMi43OSwyLjc5LDAsMCwwLDg2LDY0LjZWNTIuMDdBNy43Nyw3Ljc3LDAsMCwwLDc4LjA1LDQ0LjI1WiIvPjxwYXRoIGNsYXNzPSJjbHMtNiIgZD0iTTIxLjEsNjNoMTBhMS44MywxLjgzLDAsMSwwLDAtMy42NmgtMTBhMS44MywxLjgzLDAsMCwwLDAsMy42NloiLz48Y2lyY2xlIGNsYXNzPSJjbHMtNCIgY3g9IjQwLjU3IiBjeT0iMzcuNzMiIHI9IjIuMTUiLz48Y2lyY2xlIGNsYXNzPSJjbHMtNCIgY3g9IjQwLjU3IiBjeT0iMjguMjMiIHI9IjEuMzUiLz48Y2lyY2xlIGNsYXNzPSJjbHMtNCIgY3g9IjU5LjcyIiBjeT0iMjguMjMiIHI9IjEuMzUiLz48Y2lyY2xlIGNsYXNzPSJjbHMtNCIgY3g9IjIxLjQyIiBjeT0iMzcuNzMiIHI9IjIuMTUiLz48Y2lyY2xlIGNsYXNzPSJjbHMtNCIgY3g9IjUwIiBjeT0iNDMuNDUiIHI9IjIuOTMiLz48Y2lyY2xlIGNsYXNzPSJjbHMtNCIgY3g9IjY4Ljg5IiBjeT0iNDMuNDUiIHI9IjIuOTMiLz48Y2lyY2xlIGNsYXNzPSJjbHMtNCIgY3g9IjMxLjA5IiBjeT0iNDMuNDUiIHI9IjIuOTMiLz48Y2lyY2xlIGNsYXNzPSJjbHMtNiIgY3g9Ijc3Ljk0IiBjeT0iNTQuMzEiIHI9IjIuMTUiLz48Y2lyY2xlIGNsYXNzPSJjbHMtNiIgY3g9IjY4LjkxIiBjeT0iNTQuMzEiIHI9IjIuMTUiLz48Y2lyY2xlIGNsYXNzPSJjbHMtNCIgY3g9Ijc3Ljk0IiBjeT0iMzcuNzMiIHI9IjIuMTUiLz48Y2lyY2xlIGNsYXNzPSJjbHMtNCIgY3g9IjU5LjcyIiBjeT0iMzcuNzMiIHI9IjIuMTUiLz48Y2lyY2xlIGNsYXNzPSJjbHMtNCIgY3g9IjUwIiBjeT0iMzMuMSIgcj0iMy4wMSIvPjxjaXJjbGUgY2xhc3M9ImNscy00IiBjeD0iMzEuMDkiIGN5PSIzMy4xIiByPSIzLjAxIi8+PGNpcmNsZSBjbGFzcz0iY2xzLTQiIGN4PSI2OC44OSIgY3k9IjMzLjEiIHI9IjMuMDEiLz48L3N2Zz4=
    mediatype: image/svg+xml
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - '*'
          resources:
          - '*'
          verbs:
          - '*'
        serviceAccountName: knative-operator
      - rules:
        - apiGroups:
          - ""
          resources:
          - pods
          - services
          - events
          - configmaps
          verbs:
          - "*"
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - get
        - apiGroups:
          - apps
          resources:
          - deployments
          - replicasets
          verbs:
          - "*"
        - apiGroups:
          - apiextensions.k8s.io
          resources:
          - customresourcedefinitions
          verbs:
          - "*"
        - apiGroups:
          - networking.k8s.io
          resources:
          - networkpolicies
          verbs:
          - "*"
        - apiGroups:
          - "coordination.k8s.io"
          resources:
          - "leases"
          verbs:
          - "*"
        - apiGroups:
          - monitoring.coreos.com
          resources:
          - servicemonitors
          verbs:
          - get
          - create
        - apiGroups:
          - networking.internal.knative.dev
          resources:
          - clusteringresses
          - clusteringresses/status
          - clusteringresses/finalizers
          - ingresses
          - ingresses/status
          - ingresses/finalizers
          verbs:
          - "*"
        - apiGroups:
          - route.openshift.io
          resources:
          - routes
          - routes/custom-host
          - routes/status
          - routes/finalizers
          verbs:
          - "*"
        - apiGroups:
          - operator.knative.dev
          resources:
          - knativeservings
          - knativeservings/finalizers
          verbs:
          - '*'
        - apiGroups:
          - operator.serverless.openshift.io
          resources:
          - knativekafkas
          - knativekafkas/finalizers
          verbs:
          - '*'
        serviceAccountName: knative-openshift-ingress
      deployments:
      - name: knative-operator
        spec:
          replicas: 1
          selector:
            matchLabels:
              name: knative-operator
          template:
            metadata:
              annotations:
                sidecar.istio.io/inject: "false"
              labels:
                name: knative-operator
            spec:
              containers:
              - env:
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: OPERATOR_NAME
                  value: knative-operator
                - name: SYSTEM_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: METRICS_DOMAIN
                  value: knative.dev/serving-operator
                - name: REQUIRED_SERVING_NAMESPACE
                  value: "knative-serving"
                - name: REQUIRED_EVENTING_NAMESPACE
                  value: "knative-eventing"
                - name: SERVING_SERVICE_MONITOR_RBAC_MANIFEST_PATH
                  value: "/var/run/ko/monitoring/rbac-proxy.yaml"
                # This reference will be replaced in local builds and CI via hack/lib/catalogsource.bash.
                image: registry.ci.openshift.org/openshift/openshift-serverless-nightly:openshift-knative-operator
                imagePullPolicy: IfNotPresent
                name: knative-operator
                ports:
                - containerPort: 9090
                  name: metrics
              serviceAccountName: knative-operator
      - name: knative-openshift
        spec:
          replicas: 1
          selector:
            matchLabels:
              name: knative-openshift
          template:
            metadata:
              labels:
                name: knative-openshift
                app: openshift-admission-server
            spec:
              serviceAccountName: knative-operator
              containers:
                - name: knative-openshift
                  # This reference will be replaced in local builds and CI via hack/lib/catalogsource.bash.
                  image: registry.ci.openshift.org/openshift/openshift-serverless-nightly:knative-operator
                  imagePullPolicy: Always
                  readinessProbe:
                    httpGet:
                      path: /readyz
                      port: 8687
                  livenessProbe:
                    httpGet:
                      path: /healthz
                      port: 8687
                  env:
                    - name: WATCH_NAMESPACE
                      value: ""
                    - name: NAMESPACE
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.namespace
                    - name: DEPLOYMENT_NAME
                      value: "knative-openshift"
                    - name: POD_NAME
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.name
                    - name: OPERATOR_NAME
                      value: "knative-openshift"
                    - name: REQUIRED_SERVING_NAMESPACE
                      value: "knative-serving"
                    - name: REQUIRED_EVENTING_NAMESPACE
                      value: "knative-eventing"
                    - name: REQUIRED_KAFKA_NAMESPACE
                      value: "knative-eventing"
                    - name: SERVING_RESOURCES_DASHBOARD_MANIFEST_PATH
                      value: "deploy/resources/dashboards/grafana-dash-knative-serving-resources.yaml"
                    - name: EVENTING_RESOURCES_DASHBOARD_MANIFEST_PATH
                      value: "deploy/resources/dashboards/grafana-dash-knative-eventing-resources.yaml"
                    - name: EVENTING_SOURCE_DASHBOARD_MANIFEST_PATH
                      value: "deploy/resources/dashboards/grafana-dash-knative-eventing-source.yaml"
                    - name: EVENTING_BROKER_DASHBOARD_MANIFEST_PATH
                      value: "deploy/resources/dashboards/grafana-dash-knative-eventing-broker.yaml"
                    - name: KOURIER_MANIFEST_PATH
                      value: deploy/resources/kourier/kourier-latest.yaml
                    - name: KAFKACHANNEL_MANIFEST_PATH
                      value: deploy/resources/knativekafka/kafkachannel-latest.yaml
                    - name: KAFKASOURCE_MANIFEST_PATH
                      value: deploy/resources/knativekafka/kafkasource-latest.yaml
                    - name: QUICKSTART_MANIFEST_PATH
                      value: "deploy/resources/quickstart/serverless-application-quickstart.yaml"
      - name: knative-openshift-ingress
        spec:
          replicas: 1
          selector:
            matchLabels:
              name: knative-openshift-ingress
          template:
            metadata:
              labels:
                name: knative-openshift-ingress
            spec:
              serviceAccountName: knative-openshift-ingress
              containers:
                - name: knative-openshift-ingress
                  # This reference will be replaced in local builds and CI via hack/lib/catalogsource.bash.
                  image: registry.ci.openshift.org/openshift/openshift-serverless-nightly:knative-openshift-ingress
                  imagePullPolicy: Always
                  env:
                    - name: WATCH_NAMESPACE
                      value: "" # watch all namespaces for ClusterIngress
                    - name: POD_NAME
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.name
                    - name: OPERATOR_NAME
                      value: "knative-openshift-ingress"
                    - name: SYSTEM_NAMESPACE
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.namespace
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - pods
          - services
          - endpoints
          - persistentvolumeclaims
          - events
          - configmaps
          - secrets
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - get
        - apiGroups:
          - apps
          resources:
          - deployments
          - daemonsets
          - replicasets
          - statefulsets
          verbs:
          - '*'
        - apiGroups:
          - monitoring.coreos.com
          resources:
          - servicemonitors
          verbs:
          - get
          - create
        - apiGroups:
          - apps
          resourceNames:
          - knative-operator
          resources:
          - deployments/finalizers
          verbs:
          - update
        - apiGroups:
          - operator.knative.dev
          resources:
          - '*'
          verbs:
          - '*'
        serviceAccountName: knative-operator
    strategy: deployment
  webhookdefinitions:
  - generateName: validating.knativeeventings.operator.serverless.openshift.io
    type: ValidatingAdmissionWebhook
    deploymentName: knative-openshift
    admissionReviewVersions:
    - v1beta1
    containerPort: 9876
    failurePolicy: Ignore
    rules:
    - apiGroups:
      - operator.knative.dev
      apiVersions:
      - v1alpha1
      operations:
      - CREATE
      - UPDATE
      resources:
      - knativeeventings
    sideEffects: None
    webhookPath: /validate-knativeeventings
  - generateName: validating.knativeservings.operator.serverless.openshift.io
    type: ValidatingAdmissionWebhook
    deploymentName: knative-openshift
    admissionReviewVersions:
    - v1beta1
    containerPort: 9876
    failurePolicy: Ignore
    rules:
    - apiGroups:
      - operator.knative.dev
      apiVersions:
      - v1alpha1
      operations:
      - CREATE
      - UPDATE
      resources:
      - knativeservings
    sideEffects: None
    webhookPath: /validate-knativeservings
  - generateName: validating.knativekafkas.operator.serverless.openshift.io
    type: ValidatingAdmissionWebhook
    deploymentName: knative-openshift
    admissionReviewVersions:
    - v1beta1
    containerPort: 9876
    failurePolicy: Ignore
    rules:
    - apiGroups:
      - operator.serverless.openshift.io
      apiVersions:
      - v1alpha1
      operations:
      - CREATE
      - UPDATE
      resources:
      - knativekafkas
    sideEffects: None
    webhookPath: /validate-knativekafkas
  - generateName: mutating.knativeeventings.operator.serverless.openshift.io
    type: MutatingAdmissionWebhook
    deploymentName: knative-openshift
    admissionReviewVersions:
    - v1beta1
    containerPort: 9876
    failurePolicy: Ignore
    rules:
    - apiGroups:
      - operator.knative.dev
      apiVersions:
      - v1alpha1
      operations:
      - CREATE
      - UPDATE
      resources:
      - knativeeventings
    sideEffects: None
    webhookPath: /mutate-knativeeventings
  - generateName: mutating.knativeservings.operator.serverless.openshift.io
    type: MutatingAdmissionWebhook
    deploymentName: knative-openshift
    admissionReviewVersions:
    - v1beta1
    containerPort: 9876
    failurePolicy: Ignore
    rules:
    - apiGroups:
      - operator.knative.dev
      apiVersions:
      - v1alpha1
      operations:
      - CREATE
      - UPDATE
      resources:
      - knativeservings
    sideEffects: None
    webhookPath: /mutate-knativeservings
  installModes:
  - supported: false
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - serverless
  - FaaS
  - microservices
  - scale to zero
  - knative
  - serving
  - eventing
  - kafka
  links:
  - name: Documentation
    url: https://access.redhat.com/documentation/en-us/openshift_container_platform/__OCP_TARGET__/html/serverless_applications/index
  - name: Source Repository
    url: https://github.com/openshift-knative/serverless-operator
  maintainers:
  - email: serverless-support@redhat.com
    name: Serverless Team
  maturity: stable
  provider:
    name: Red Hat
  relatedImages:
    - name: knative-operator
      # This reference will be replaced in local builds and CI via hack/lib/catalogsource.bash.
      image: registry.ci.openshift.org/openshift/openshift-serverless-nightly:openshift-knative-operator
    - name: knative-openshift
      # This reference will be replaced in local builds and CI via hack/lib/catalogsource.bash.
      image: registry.ci.openshift.org/openshift/openshift-serverless-nightly:knative-operator
    - name: knative-openshift-ingress
      # This reference will be replaced in local builds and CI via hack/lib/catalogsource.bash.
      image: registry.ci.openshift.org/openshift/openshift-serverless-nightly:knative-openshift-ingress
  replaces:
  version:
