diff --git a/vendor/knative.dev/operator/pkg/apis/operator/v1alpha1/common.go b/vendor/knative.dev/operator/pkg/apis/operator/v1alpha1/common.go
index f000b057..d5b2411d 100644
--- a/vendor/knative.dev/operator/pkg/apis/operator/v1alpha1/common.go
+++ b/vendor/knative.dev/operator/pkg/apis/operator/v1alpha1/common.go
@@ -249,6 +249,10 @@ type DeploymentOverride struct {
 	// Resources overrides resources for the containers.
 	// +optional
 	Resources []ResourceRequirementsOverride `json:"resources,omitempty"`
+
+	// Env overrides env vars for the containers.
+	// +optional
+	Env []EnvRequirementsOverride `json:"env,omitempty"`
 }

 // ResourceRequirementsOverride enables the user to override any container's
@@ -260,6 +264,14 @@ type ResourceRequirementsOverride struct {
 	corev1.ResourceRequirements
 }

+// EnvRequirementsOverride enables the user to override any container's env vars.
+type EnvRequirementsOverride struct {
+	// The container name
+	Container string `json:"container"`
+	// The desired EnvVarRequirements
+	EnvVars []corev1.EnvVar `json:"envVars,omitempty"`
+}
+
 // Manifest enables the user to specify the links to the manifests' URLs
 type Manifest struct {
 	// The link of the manifest URL
diff --git a/vendor/knative.dev/operator/pkg/apis/operator/v1alpha1/zz_generated.deepcopy.go b/vendor/knative.dev/operator/pkg/apis/operator/v1alpha1/zz_generated.deepcopy.go
index 9c5636ce..69965aa6 100644
--- a/vendor/knative.dev/operator/pkg/apis/operator/v1alpha1/zz_generated.deepcopy.go
+++ b/vendor/knative.dev/operator/pkg/apis/operator/v1alpha1/zz_generated.deepcopy.go
@@ -244,6 +244,13 @@ func (in *DeploymentOverride) DeepCopyInto(out *DeploymentOverride) {
 			(*in)[i].DeepCopyInto(&(*out)[i])
 		}
 	}
+	if in.Env != nil {
+		in, out := &in.Env, &out.Env
+		*out = make([]EnvRequirementsOverride, len(*in))
+		for i := range *in {
+			(*in)[i].DeepCopyInto(&(*out)[i])
+		}
+	}
 	return
 }

@@ -257,6 +264,29 @@ func (in *DeploymentOverride) DeepCopy() *DeploymentOverride {
 	return out
 }

+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *EnvRequirementsOverride) DeepCopyInto(out *EnvRequirementsOverride) {
+	*out = *in
+	if in.EnvVars != nil {
+		in, out := &in.EnvVars, &out.EnvVars
+		*out = make([]v1.EnvVar, len(*in))
+		for i := range *in {
+			(*in)[i].DeepCopyInto(&(*out)[i])
+		}
+	}
+	return
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnvRequirementsOverride.
+func (in *EnvRequirementsOverride) DeepCopy() *EnvRequirementsOverride {
+	if in == nil {
+		return nil
+	}
+	out := new(EnvRequirementsOverride)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *GithubSourceConfiguration) DeepCopyInto(out *GithubSourceConfiguration) {
 	*out = *in
diff --git a/vendor/knative.dev/operator/pkg/reconciler/common/deployments_override.go b/vendor/knative.dev/operator/pkg/reconciler/common/deployments_override.go
index 0772f16a..14fcf602 100644
--- a/vendor/knative.dev/operator/pkg/reconciler/common/deployments_override.go
+++ b/vendor/knative.dev/operator/pkg/reconciler/common/deployments_override.go
@@ -47,6 +47,7 @@ func DeploymentsTransform(obj v1alpha1.KComponent, log *zap.SugaredLogger) mf.Tr
 				replaceTolerations(&override, deployment)
 				replaceAffinities(&override, deployment)
 				replaceResources(&override, deployment)
+				replaceEnv(&override, deployment)
 				if err := scheme.Scheme.Convert(deployment, u, nil); err != nil {
 					return err
 				}
@@ -120,3 +121,14 @@ func replaceResources(override *v1alpha1.DeploymentOverride, deployment *appsv1.
 		}
 	}
 }
+
+func replaceEnv(override *v1alpha1.DeploymentOverride, deployment *appsv1.Deployment) {
+	if len(override.Env) > 0 {
+		containers := deployment.Spec.Template.Spec.Containers
+		for i := range containers {
+			if override := findEnvOverride(override.Env, containers[i].Name); override != nil {
+				mergeEnv(&override.EnvVars, &containers[i].Env)
+			}
+		}
+	}
+}
diff --git a/vendor/knative.dev/operator/pkg/reconciler/common/env_override.go b/vendor/knative.dev/operator/pkg/reconciler/common/env_override.go
new file mode 100644
index 00000000..b03f4983
--- /dev/null
+++ b/vendor/knative.dev/operator/pkg/reconciler/common/env_override.go
@@ -0,0 +1,50 @@
+/*
+Copyright 2022 The Knative Authors
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+*/
+
+package common
+
+import (
+	v1 "k8s.io/api/core/v1"
+	"knative.dev/operator/pkg/apis/operator/v1alpha1"
+)
+
+func mergeEnv(src, tgt *[]v1.EnvVar) {
+	if len(*tgt) > 0 {
+		for _, srcV := range *src {
+			exists := false
+			for i, tgtV := range *tgt {
+				if srcV.Name == tgtV.Name {
+					(*tgt)[i] = srcV
+					exists = true
+				}
+			}
+			if !exists {
+				*tgt = append(*tgt, srcV)
+			}
+		}
+	} else {
+		*tgt = *src
+	}
+}
+
+func findEnvOverride(resources []v1alpha1.EnvRequirementsOverride, name string) *v1alpha1.EnvRequirementsOverride {
+	for _, override := range resources {
+		if override.Container == name {
+			return &override
+		}
+	}
+	return nil
+}
